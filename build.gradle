group 'org.acamu.devops'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

ext {
    JUNIT_JUPITER_VERSION = "5.0.2"
    JUNIT_PLATFORM_VERSION = "1.0.2"
    MOCKITO_VERSION = "2.12.0"
    POWER_MOCK_UTILS_VERSION = "1.6.6"
    ASSERTJ_CORE_VERSION = "3.8.0"
    JACOCO_VERSION = "0.7.9"

sonarProjectKey = "org.sonarqube:java-gradle-simple"
sonarProjectName = "Java :: Simple Project :: SonarQube Scanner for Gradle"
    jacocoDestinationFile = "${buildDir}/jacoco/junitPlatformTest.exec"
    jacocoExclusions = ['**/Main*']

}


apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: "findbugs"
apply plugin: "pmd"

sonarqube {
    properties {
        property 'sonar.projectKey', sonarProjectKey
        property 'sonar.projectName', sonarProjectName

        property "sonar.jacoco.reportPath", jacocoDestinationFile
        property 'sonar.coverage.exclusions', jacocoExclusions
    }
}
/*
jacoco {
   // toolVersion = "0.7.7.201606060606" //jacoco version
    reportsDir = file("$buildDir/reports/jacoco") //default directory where jacoco generates test reports
}*/

repositories {
    mavenCentral()
}


dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.1.0")

    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.1',
            'org.junit.vintage:junit-vintage-engine:4.12.1',
            'org.junit.platform:junit-platform-launcher:1.0.1',
            'org.junit.platform:junit-platform-runner:1.0.1')
}

junitPlatform {
     reportsDir file("$project.buildDir/reports/test")
}


findbugs {
    ignoreFailures = true
   // toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = ["java-basic", "java-braces"]
}
// add CPD to check
check << {
  File outDir = new File("$project.buildDir/reports/cpd")
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml',
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {
      include(name: '**/*.java')
    }
  }
}

afterEvaluate {

    jacoco {
      //  toolVersion = toolVersions.jacoco
       // toolVersion = "0.7.1.201405082137"
       // reportsDir = file("$buildDir/reports/jacoco") //default directory where jacoco generates test reports
        applyTo junitPlatformTest
    }

    task junit5CodeCoverageReport(type:JacocoReport){
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(project.sourceSets.main.output)
        reports {
            xml.enabled = true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled = true
            html.destination file("${buildDir}/reports/jacoco/html")
        }
    }
     build.dependsOn junit5CodeCoverageReport
}

